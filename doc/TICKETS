**** NOW *****

**** SOON ****

- Change design of trace window: information overload, present information
  on demand, like variable bindings, rule, etc., maybe in a different (pop up)
  window

- "Search" in trace window: for first presence/absence of some configuration,
  which could be marked in the input/output window.

- Make available: List of features | types | feature/value pairs _or_ values,
  given a specific feature
  the list of rules where a specific feat | type | f/v occurs

- Better error message when ID contains illegal character
  --> Console:1:709: syntax error, unexpected $undefined, expecting ')'
  Have to find a good example for that

- Warning about unclear feature status should point to problem with information
  contained in the warning

- Error in ext lf parser: coreferences not properly treated
  - batch disjunctive normal form (COMPLICATED / POSTPONED)

- rules that are only applied once (syntax, execution)

- pretty printing for LF's (and rules) so selected inputs from batch window
  are readable

- #var variables on RHS which do not occur on LHS should be a syntax error

- Copying of structures (and substructures) into a new window / a text
  representation to the clipboard

- Applying a selected structure to a selected rule to see matching problems
  or effects of application --> display of failure!

- j2emacs does not work properly on Windows/cygwin
  --> packaging a lean binary distribution & make bundle available for
      TNO (mail of 25. Nov '11)

- history does not work properly
- and not properly saved in project file

- maybe more parsing-like behaviour to be able to generate alternatives to
  choose from with additional external features (dialogue state / history)??
  - fuzzy / robust interpretation

- Reverse rules (Dialogue act recognition as reverse operation of generation)

- Learn rules

Today:

- get ASR parsing for AlizE to work
  * + n-best lattices instead of best only
    > check with giacomo/heriberto, more general: check interface,
  * connect parser with Dialogue manager (heriberto) , or directly ASR??
  * Urbify the parser (Heriberto)
  * best-first parsing
- manage partiality for AlizE: return n-best chunks
- get conversion to FS to work

+ Exception catching during batch test?
+ better logging for generation in urbi system (log4j properties?)
+ log4j properties: see file components/dialogue-fst/start-dialogue-fst.sh
+ if there is additional material in the LF input window, there is NO parse
  error! (fixed: due to batch LFs parsing)
+ batch reload does not clean items
+ sorting results in wrong selection in main window and editor
+ *** FAILURE *** disappeared in batch result window
+ sorting for batch result window

+ test if rules meant to be applied on substructures really work: OK
+ generate all sentences for canned text with a large batch run
+ batch window does not refresh on batch rerun
+ syntax error in batch file should not break the whole process
+ progress bar / activity indicator for batch tests (slow generator)
+ j2emacs pops to front when file is shown (tested in gtk/linux)

*** DISCUSSIONS ***

arguments / modifiers to the cplanner process rather in input structure, or
by access using plugins / to background memory

a) as part of input LF
   - flexible
   - no additional machinery
   - easier (?) to test
   - to keep it compact, knowledge about arguments must be duplicated
     (in planner, and somewhere else)
b) as request to a background process
   - needs appropriate plugin(s)
   - less transparent / harder to debug(?)
   - needs proper stub to be able to debug without running the whole system
     => needs proper modularization
   - non-cascaded processing would maybe require this

